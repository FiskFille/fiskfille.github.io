---
layout: default
modal-id: 1
date: 2022-02-24
img: doctor_octopus.png
alt: image-alt
project-date: 
client:
category:
description: For Doctor Octopus’ tentacle arms, the first problem I tackled was rendering. They needed to be dynamic, able to reach virtually any surface around the player, all the while avoiding intersecting with the player model. This would be especially important, considering the fact that they also needed to stick out through the player’s back, meaning that any conventional approach would result in them instead sticking out of the player’s abdomen whenever the arms reached for something in front; they needed to curve around the player.<br><br>My first attempts involved inverse kinematics. In the end though, what I ended up going with was quadratic Bézier curves. Already having points <em>A</em> and <em>B</em>, I used some simple vector math to calculate the position of a third control point <em>C</em>. Using these points, I could now draw a 2D line through 3D space, curving around the player like desired. The rest was simple, all I had to do was tile a repeating arm “segment” model across the length of this curve, telescoping it to reach any desired length.<br><br>The rest of the project involved making the physics for the arms, the main function of which was climbing. I wanted the action to feel as fluent as possible, requiring minimal input from the player, which meant that the locating of and attaching to viable points for the arms had to be handled autonomously. Additionally, the arms had to move in a way that made sense, i.e. not criss-cross when grabbing terrain; an arm closer to the right of the player should attach mostly to points to the right of the player.<br><br>The latter was achieved by assigning “preferential zones” to each arm, meaning that they would prioritize points closer to their point of origin. To actually locate viable points, a small radius of blocks is scanned around the player and the coordinates of solid blocks within that area are added to a list. The list is then iterated over in “preferential” order, and a simple ray trace check is performed to determine if the arm could in theory reach that point. If it passes the checks, move the end of the arm to that point.
---
